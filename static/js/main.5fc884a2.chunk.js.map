{"version":3,"sources":["Components/CountriesStats/InfoBox.js","Components/CountriesStats/utilis.js","Components/CountriesStats/Map.js","Components/CountriesStats/LineGraph.js","Components/CountriesStats/Table.js","Components/CountriesStats/CountriesStats.js","Components/RegionalStats/Table.js","Components/RegionalStats/RegionalStats.js","Components/StatesStats/InfoBox.js","Components/StatesStats/Bargraph1.js","Components/StatesStats/LineGraph2.js","Components/StatesStats/TableStates.js","Components/StatesStats/StatesStats.js","Components/App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","props","Card","onClick","className","CardContent","Typography","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","formatStats","stat","numeral","format","showDataOnMap","data","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","color","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","TileLayer","url","attribution","options","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","display","ticks","callback","index","values","LineGraph","useState","graphData","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","a","fetch","then","response","json","fetchData","height","width","background","marginBottom","length","datasets","fill","borderColor","backgroundColor","Table","padding","active","CountriesStats","setCountries","setCountry","setCountryInfo","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getAllCountriesData","onCountryChange","e","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","continents","continent","RegionalStats","setContinents","CssBaseline","Container","maxWidth","ReactFc","fcRoot","FusionCharts","Column2d","FusionTheme","Bargraph1","state","dataPoint","chartConfigs","dataFormat","dataSource","chart","caption","xAxisName","yAxisName","theme","margin","LineGraph2","stateName","timeline","TableStates","states","useStyles","makeStyles","root","flexGrow","paper","spacing","textAlign","palette","text","secondary","StatesStats","setStateData","setStateInfo","setSelectedState","allStates","setAllStates","Grid","container","item","md","TabPanel","children","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","SimpleTabs","classes","React","setValue","AppBar","position","Tabs","event","newValue","aria-label","Tab","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fc884a2.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\nimport React from 'react'\nimport './InfoBox.css';\n\nfunction InfoBox({title, cases, total, ...props}) {\n    return (\n        <div >\n            <Card \n            onClick={props.onClick}\n            className=\"infoCard\" >\n            <CardContent >\n                {/* Title */}\n                <Typography className=\"infoBox__title\" >\n                    {title} <small>(click to visualize on map)</small>\n                </Typography>\n                \n                {/* Number of cases:Number */}\n                <h2 className=\"infoBox__cases\"> <small>{cases}</small> </h2>\n                \n                {/* Total:Number */}\n\n                <Typography className=\"infoBox__total\" >\n                    {total} Total\n                </Typography>\n\n\n            </CardContent>\n        </Card>\n        </div>\n        \n    )\n}\n\nexport default InfoBox;\n","import numeral from 'numeral';\nimport React from 'react';\n// import numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      rgb: \"rgb(204, 16, 52)\",\n      half_op: \"rgba(204, 16, 52, 0.5)\",\n      multiplier: 160,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 120,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(128,0,128)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 200,\n    },\n  };\n\n\nexport const formatStats = (stat) => stat ? `+${numeral(stat).format(\"0,0a\")}` : \"+0\";\n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    sortedData.sort((a,b) => {\n        if(a.cases > b.cases) {\n            return -1;\n        }else {\n            return 1;\n        }\n    });\n    return sortedData;\n}\n\n\nexport const showDataOnMap = (data, casesType='cases') => \n    data.map(country => (\n        <Circle\n            center = {[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            pathOptions={{\n                color: casesTypeColors[casesType].rgb,\n                fillColor: casesTypeColors[casesType].rgb,\n            }}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n                <div className=\"popup-wrapper\">\n                    <div\n                        className=\"popup-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})`}}\n                    />\n                    <div className=\"popup-name\">{country.country}</div>\n                    <div className=\"popup-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"popup-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"popup-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ));","import React from 'react';\nimport './Map.css'\nimport { MapContainer as LeafletMap, TileLayer, useMap } from 'react-leaflet';\nimport { showDataOnMap } from './utilis';\n\nfunction Map({countries, casesType, center, zoom}) {\n\n    function ChangeView({center,zoom}) {\n        const map = useMap();\n        map.setView(center,zoom);\n\n        return null;\n    }\n\n\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <ChangeView center={center} zoom={zoom} />\n                <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n\n                {/* Loop through the countries and draw circles */}\n\n                {showDataOnMap(countries, casesType)}\n\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { numeral } from 'numeral';\n\n\nconst options = {\n\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\n\n\nfunction LineGraph({casesType = 'cases'}) {\n\n    const [graphData, setData] = useState({});\n\n    const buildChartData = (data, casesType='cases') => {\n        const chartData = [];\n        let lastDataPoint;\n        for(let date in data.cases){\n            if(lastDataPoint) {\n                const newDataPoint = {\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint);\n            }\n            lastDataPoint = data[casesType][date];\n        }\n        return chartData;\n    }\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            await  fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n                .then(response => response.json())\n                .then(data => {\n                    let chartData = buildChartData(data, 'cases');\n                    setData(chartData)\n            });\n        }\n\n        fetchData();\n        \n    },[casesType]);\n\n    \n\n    return (\n        <div style={{height: '30vh', width: '100%', color: 'white', background: 'white',\n        marginBottom: '10px'}}>\n            {graphData?.length > 0 && (\n                <Line\n                    data = {{\n                        datasets: [\n                            {\n                                label: \"Worldwide Daily Cases\",\n                                fill: true,\n                                borderColor: \"#CC1034\",\n                                backgroundColor: \"rgba(204, 16, 52, 0.7)\",\n                                data: graphData\n                            },\n                        ],\n                    }}\n                    options={options}\n                />\n            )}\n            \n            \n        </div>\n    )\n}\n\nexport default LineGraph;\n","import React from 'react';\nimport numeral from 'numeral';\nimport './Table.css';\n\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n            {/* <table> */}\n                <tr style={{padding: '10px'}}>\n                    <th style={{color: \"black\"}}>Country</th>\n                    <th style={{color: \"black\"}}>Confirmed Cases</th>\n                    <th style={{color: \"red\"}}>Active</th>\n                    <th style={{color: \"green\"}}>Recovered</th>\n                    <th style={{color: \"purple\"}}>Deaths</th>\n                </tr>\n             {countries.map((country) => (\n                \n                <tr>\n                    <td>{country.country}</td>\n                    <td>\n                        {numeral(country.cases).format(\"0,0\")}\n                    </td>\n                    <td>{country.active}</td>\n                    <td>{country.recovered}</td>\n                    <td>{country.deaths}</td>\n                </tr>\n                \n      ))} \n        </div>\n    )\n}\n\nexport default Table","import { FormControl, MenuItem, Select } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport LineGraph from './LineGraph';\nimport './CountriesStats.css';\nimport \"leaflet/dist/leaflet.css\"\nimport { formatStats } from './utilis';\nimport Table from './Table'\n\n\n\nfunction CountriesStats() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [mapCenter, setMapCenter] = useState({ lat: 35, lng: -42.658 })\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  // const [states, setStateData] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n\n  // get worldwide data\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n\n   \n\n    // fetch('https://api.caw.sh/v3/covid-19/continents')\n    // .then(response => response.json())\n    // .then(data => {\n    //   setContinents(data)\n    // })\n\n  }, []);\n\n \n\n  useEffect(() => {\n    // Send an async request to get all countries' data, wait for the response and use that response\n\n    const getAllCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries').then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          // const sortedData = sortData(data);\n          // setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n\n    getAllCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          setCountry(countryCode);\n          setCountryInfo(data);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n      });\n  };\n  console.log(countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"hero\">\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1 style={{color: \"#3f51b5\"}}>COVID-19 Stats Tracker</h1>\n            <FormControl>\n              <Select className=\"app__search\" variant=\"outlined\"\n                onChange={onCountryChange}\n                value={country}>\n\n                {/* loop through all countries in our country variable and render each value */}\n\n                <MenuItem value={country}>Worldwide</MenuItem>\n                {countries.map(function (country, index) {\n                  return <MenuItem key={index} value={country.value}>{country.name}</MenuItem>\n                })}\n\n              </Select>\n            </FormControl>\n          </div>\n\n          {/* map */}\n\n          <Map\n            casesType={casesType}\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={mapZoom}\n          />\n          <div>\n          <h3 style={{color: \"#3f51b5\"}}>COVID-19 in Different Countries</h3>\n          <Table\n            countries={mapCountries}\n          />\n          </div>\n\n         \n        </div>\n\n        <div className=\"app_right\">\n          <div className=\"app__right__top\">\n            <h3 style={{color: \"#3f51b5\"}}>Worldwide New Cases</h3>\n            <LineGraph />\n          </div>\n\n          <div  >\n            <div>\n\n              <div className=\"app__stats\">\n                <InfoBox\n                  onClick={e => setCasesType('cases')}\n                  title=\"Cases\"\n                  cases={formatStats(countryInfo.todayCases)}\n                  total={formatStats(countryInfo.cases)} />\n\n                <InfoBox\n                  onClick={e => setCasesType('recovered')}\n                  title=\"Recoveries\"\n                  cases={formatStats(countryInfo.todayRecovered)}\n                  total={formatStats(countryInfo.recovered)}\n                />\n\n                <InfoBox\n                  onClick={e => setCasesType('deaths')}\n                  title=\"Deaths\"\n                  cases={formatStats(countryInfo.todayDeaths)}\n                  total={formatStats(countryInfo.deaths)}\n                />\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n       \n    </div>\n\n  );\n}\n\nexport default CountriesStats;\n","import React from 'react';\nimport numeral from 'numeral';\nimport './Table.css';\n\nfunction Table({continents}) {\n    return (\n        <div className=\"table\">\n            {/* <table> */}\n                <tr>\n                    <th style={{color: \"black\"}}>Continent</th>\n                    <th style={{color: \"black\"}}>Confirmed Cases</th>\n                    <th style={{color: \"red\"}}>Active</th>\n                    <th style={{color: \"green\"}}>Recovered</th>\n                    <th style={{color: \"purple\"}}>Deaths</th>\n                </tr>\n            {/* </table> */}\n             {continents.map((continent) => (\n                \n                <tr>\n                    <td>{continent.continent}</td>\n                    <td>\n                        {numeral(continent.cases).format(\"0,0\")}\n                    </td>\n                    <td>{continent.active}</td>\n                    <td>{continent.recovered}</td>\n                    <td>{continent.deaths}</td>\n                </tr>\n      ))}\n        </div>\n    )\n}\n\nexport default Table","import { useEffect, useState } from 'react';\nimport Table from './Table';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container'\n\n\n\nfunction RegionalStats() {\n  \n  const [continents, setContinents] = useState([]);\n  // const [states, setStateData] = useState([]);\n\n\n  // get worldwide data\n  useEffect(() => {\n\n    fetch('https://api.caw.sh/v3/covid-19/continents')\n    .then(response => response.json())\n    .then(data => {\n      setContinents(data)\n    })\n\n    // fetch('https://api.caw.sh/v3/covid-19/continents')\n    // .then(response => response.json())\n    // .then(data => {\n    //   setContinents(data)\n    // })\n\n  }, []);\n\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n      <Table continents={continents} />\n      </Container>\n    </>\n\n  );\n}\n\nexport default RegionalStats;\n","import { Card, CardContent, Typography } from '@material-ui/core'\nimport React from 'react'\nimport './InfoBox.css';\n\nfunction InfoBox({title, cases, total, ...props}) {\n    return (\n        <div >\n            <Card \n            className=\"infoCard\" >\n            <CardContent >\n                {/* Title */}\n                <Typography className=\"infoBox__title\" >\n                    {title} <small></small>\n                </Typography>\n                \n                {/* Number of cases:Number */}\n                <h2 className=\"infoBox__cases\"> <small>{cases}</small> </h2>\n                \n                {/* Total:Number */}\n\n                <Typography className=\"infoBox__total\" >\n                    {total}\n                </Typography>\n\n\n            </CardContent>\n        </Card>\n        </div>\n        \n    )\n}\n\nexport default InfoBox;\n","import React, { useEffect,useState } from 'react';\nimport ReactFc  from 'react-fusioncharts';\nimport FusionCharts from 'fusioncharts';\nimport Column2d from 'fusioncharts/fusioncharts.charts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.gammel';\n\n\nReactFc.fcRoot(FusionCharts, Column2d, FusionTheme)\n\nfunction Bargraph1({data}) {\n\n    // Preparing the chart data\n    const [chartData, setData] = useState({});\n\n    \n\n    const fetchData = async (state) =>{\n        const url = state === 'USA' ? 'https://disease.sh/v3/covid-19/countries/US': `https://api.caw.sh/v3/covid-19/states/${state}`;\n\n        fetch(url)\n        .then((response) => response.json())\n        .then(data => {\n            let dataPoint=[\n                {\n                    label: 'Projected Cases',\n                    value: data?.cases * 10\n                },\n                {\n                    label: 'Confirmed Cases',\n                    value: data?.cases\n                },\n                {\n                    label: 'Recovered Cases',\n                    value: data?.recovered\n                },\n                {\n                    label: 'Active Cases',\n                    value: data?.active\n                },\n                {\n                    label: 'Projected Deaths',\n                    value: data?.deaths * 10\n                },\n                {\n                    label: 'Deaths',\n                    value: data?.deaths\n                }\n            ]\n            setData(dataPoint)\n        })\n    }\n\n    useEffect(()=> {\n        fetchData(data);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[data]);\n\n    \n    // Create a JSON object to store the chart configurations\nconst chartConfigs = {\n    type: \"column2d\", // The chart type\n    width: \"500\", // Width of the chart\n    height: \"500\", // Height of the chart\n    dataFormat: \"json\", // Data type\n    dataSource: {\n      // Chart Configuration\n      chart: {\n        caption: `COVID-19 Confirmed Cases in ${data}`,\n        xAxisName: \"Type of Cases\",           //Set the x-axis name\n        yAxisName: \"Number of Cases\",\n        theme: 'candy'                 //Set the theme for your chart\n      },\n      // Chart Data - from step 2\n      data: chartData\n    }\n  };\n    return (\n        <div style={{margin: '10px'}}>\n            <ReactFc {...chartConfigs} />\n        </div>\n    )\n}\n\nexport default Bargraph1\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { numeral } from 'numeral';\n\n\nconst options = {\n\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\n\n\nfunction LineGraph2({data}) {\n\n    let stateName = data;\n    const [graphData, setData] = useState({});\n\n    const buildChartData = (data, casesType='cases') => {\n        console.log();\n        const chartData = [];\n        let lastDataPoint;\n        if(stateName === 'USA'){\n            for(let date in data.cases){\n                if(lastDataPoint) {\n                    const newDataPoint = {\n                        x: date,\n                        y: data[casesType][date] - lastDataPoint\n                    }\n                    chartData.push(newDataPoint);\n                }\n                lastDataPoint = data[casesType][date];\n            }\n        }else {\n            \n            for(let date of data){\n                if(lastDataPoint) {\n                    const newDataPoint = {\n                        x: date.date,\n                        y: date.cases - lastDataPoint\n                    }\n                    chartData.push(newDataPoint);\n                }\n                lastDataPoint = date.cases;\n            }\n        }\n        \n        return chartData;\n    }\n\n\n    const fetchData = async (state) => {\n        const url = state === 'USA'? 'https://api.caw.sh/v3/covid-19/historical/USA?lastdays=30' : `https://api.caw.sh/v3/covid-19/nyt/states/${data}?lastdays=30`\n\n        await  fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if(state==='USA'){\n                    let chartData = buildChartData(data.timeline, 'cases');\n                    setData(chartData);\n                }else {\n                    let chartData = buildChartData(data, 'cases');\n                    setData(chartData);\n                }\n                \n        });\n    }\n\n    useEffect(() => {\n       fetchData(stateName);\n       // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[stateName]);\n\n    \n\n    \n\n    return (\n        <div style={{margin: '10px'}}>\n            <div style={{height: '60vh', width: '100%', color: 'white', background: 'white',\n                marginBottom: '10px'}}>\n                    {graphData?.length > 0 && (\n                        <Line\n                            data = {{\n                                datasets: [\n                                    {\n                                        label: `${stateName} daily cases last 30 days`,\n                                        fill: true,\n                                        borderColor: \"#CC1034\",\n                                        backgroundColor: \"rgba(204, 16, 52, 0.7)\",\n                                        data: graphData\n                                    },\n                                ],\n                            }}\n                            options={options}\n                        />\n                    )}\n                    \n                    \n            </div>\n        </div>\n        \n    )\n}\n\nexport default LineGraph2;\n","import React from 'react';\nimport numeral from 'numeral';\nimport './Table.css';\n\nfunction TableStates({states}) {\n    return (\n        <div className=\"table\">\n            {/* <table> */}\n                <tr style={{padding: '10px'}}>\n                    <th style={{color: \"black\"}}>Country</th>\n                    <th style={{color: \"black\"}}>Confirmed Cases</th>\n                    <th style={{color: \"red\"}}>Active</th>\n                    <th style={{color: \"green\"}}>Recovered</th>\n                    <th style={{color: \"purple\"}}>Deaths</th>\n                </tr>\n             {states.map((country) => (\n                \n                <tr>\n                    <td>{country.state}</td>\n                    <td>\n                        <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n                    </td>\n                    <td>{country.active}</td>\n                    <td>{country.recovered}</td>\n                    <td>{country.deaths}</td>\n                </tr>\n                \n      ))} \n        </div>\n    )\n}\n\nexport default TableStates","import { FormControl, MenuItem, Select } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport InfoBox from './InfoBox';\nimport './StatesStats.css';\nimport { formatStats } from './utilis';\nimport { makeStyles } from '@material-ui/core/styles';\nimport numeral from 'numeral';\nimport Grid from '@material-ui/core/Grid';\nimport Bargraph1 from './Bargraph1';\nimport LineGraph2 from './LineGraph2';\nimport TableStates from './TableStates';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }));\n\nfunction StatesStats() {\n\n  const classes = useStyles();\n  // const [states, setStates] = useState([]);\n  // // const [state, setState] = useState('CA');\n  // const [stateInfo, setStateInfo] = useState({});\n  const [states, setStateData] = useState([]);\n  const [stateInfo, setStateInfo] = useState({});\n\n  const [state, setSelectedState] = useState('USA');\n  const [casesType, setCasesType] = useState('cases');\n  const [allStates, setAllStates] = useState([]);\n  \n  useEffect(() => {\n    // get all US states\n    fetch('https://api.caw.sh/v3/covid-19/historical/usacounties')\n    .then(response => response.json())\n    .then(data => {\n      setStateData(data);\n    });\n    // get USA data\n    fetch('https://disease.sh/v3/covid-19/countries/US')\n    .then(response => response.json())\n    .then(data => {\n      setStateInfo(data);\n    })\n\n    // get all states data\n    fetch('https://api.caw.sh/v3/covid-19/states')\n    .then((response) => response.json())\n    .then((data)=> {\n      setAllStates(data);\n    });\n  }, []);\n\n  const onStateChange =(e) => {\n    const stateName = e.target.value;\n\n    const url = stateName === 'USA' ? 'https://disease.sh/v3/covid-19/countries/US' : `https://api.caw.sh/v3/covid-19/states/${stateName}`;\n    fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      setStateInfo(data)\n    }) \n    setSelectedState(stateName);\n  }\n  // useEffect(() => {\n  //send request to get CA data\n  \n//   const initialFetch = async () => {\n//     fetch('https://api.covidactnow.org/v2/state/CA.json?apiKey=fa4e0a37946e4caa8692c487250889cb')\n//       .then(response => response.json())\n//       .then(data => {\n//         setStateInfo(data);\n//       })\n//   };\n//   initialFetch();\n//   }, []);\n\n// useEffect(() => {\n//   // Send an async request to get all states' data, wait for the response and use that response\n\n//   const getAllStatesData = async () => {\n//     await fetch('https://api.covidactnow.org/v2/states.json?apiKey=fa4e0a37946e4caa8692c487250889cb')\n//     .then((response) => response.json())\n//     .then((data) => {\n//         const statesData = data.map((state) => ({\n//           name: state.state,\n//           value: state.state,\n//         }));\n\n//         setStates(statesData);\n//       });\n//   };\n\n//   getAllStatesData();\n// }, []);\n\n\n// const onStateChange = async (e) => {\n//     const stateCode = e.target.value;\n\n//     const url = `https://api.covidactnow.org/v2/state/${stateCode}.json?apiKey=fa4e0a37946e4caa8692c487250889cb`;\n//       await fetch(url)\n//         .then((response) => response.json())\n//         .then((data) => {\n//           setState(stateCode);\n//           setStateInfo(data);\n     \n//       });\n// };\n\n// console.log(stateInfo);\n\n  return (\n  <div>\n      <FormControl>\n        <Select className=\"app__search\" variant=\"outlined\"\n          onChange={onStateChange}\n          value={state}>\n\n          {/* loop through all countries in our country variable and render each value */}\n\n          <MenuItem value='USA'>{state}</MenuItem>\n          {states.map(function (state, index) {\n            return <MenuItem key={index} value={state}>{state}</MenuItem>\n          })}\n\n        </Select>\n      </FormControl>\n      \n      <Grid container spacing={3}>\n        <Grid item md>\n        <CssBaseline />\n      <Container maxWidth=\"lg\">\n        <LineGraph2\n          data={state}\n        />\n      </Container>\n        </Grid>\n        <Grid item md>\n        <CssBaseline />\n      <Container maxWidth=\"lg\">\n        <Bargraph1\n          data={state}\n        />\n      </Container>        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        \n        <Grid item md>\n        <CssBaseline />\n        <h3>COVID-19 in Different States</h3>\n          <TableStates\n            states={allStates}\n          />\n        </Grid>\n        \n      </Grid>\n        \n  </div>\n  )\n};\n\nexport default StatesStats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport CountriesStats from './CountriesStats/CountriesStats';\nimport RegionalStats from './RegionalStats/RegionalStats';\nimport StateStats from './StatesStats/StatesStats'\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function SimpleTabs() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n          <Tab label=\"Worldwide and Countries\" {...a11yProps(0)} />\n          <Tab label=\"Regional Analysis\" {...a11yProps(1)} />\n          <Tab label=\"US States\" {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <CountriesStats />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <RegionalStats />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <StateStats />\n      </TabPanel>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}